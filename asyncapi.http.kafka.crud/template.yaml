---
name: example
vaults:
  server:
    type: filesystem
    options:
      keys:
        store: tls/localhost.p12
        type: pkcs12
        password: ${{env.KEYSTORE_PASSWORD}}
schemas:
  schema0:
    type: inline
    options:
      format: {components.schemas.item.type == object ==JSON}
      source:
        - Item:
            type: {components.schemas.item.type}
            properties:
              greeting:
                type: {components.schemas.item.properties.greeting.type}
            required:
              - {components.schemas.item.required}
  schema1:
    type: registry
    options:
      format: AVRO
      compatibility: forward
      source: http://localhost:8081
      version: V1
      id: schema1
  schema2:
    type: filesystem
    options:
      format: JSON
      source: schema/v3_schema.yaml
bindings:
  tcp_server0:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port: 9090
    exit: tls_server0
  tcp_server1:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port: 8080
    exit: http_server0
  tls_server0:
    type: tls
    kind: server
    vault: server
    options:
      keys:
        - localhost
      sni:
        - localhost
      alpn:
        - http/1.1
        - h2
    exit: http_server0
  http_server0:
    type: http
    kind: server
    routes:
      - when:
          - headers:
              :scheme: http
              :authority: localhost:8080
          - headers:
              :scheme: https
              :authority: localhost:9090
        exit: http_kafka_proxy0
  http_kafka_proxy0:
    type: http-kafka
    kind: proxy
    routes:
      - schemas:
          - {channels.items-snapshots.messages.items.$ref}
        when:
          - method: POST
            path: /items
        exit: kafka_cache_client0
        with:
          capability: {(operations.sendEvents.action == send) == produce}
          topic: {channels.items-snapshots || channels.items-snapshots.address}
          key: {components.correlationIds.itemsCorrelationId.location}
      - when:
          - method: PUT
            path: /items/{id}
        exit: kafka_cache_client0
        with:
          capability: {(operations.sendEvents.action == send) == produce}
          topic: {channels.items-snapshots || channels.items-snapshots.address}
          key: ${params.id}
      - when:
          - method: DELETE
            path: /items/{id}
        exit: kafka_cache_client0
        with:
          capability: {(operations.sendEvents.action == send) == produce}
          topic: {channels.items-snapshots || channels.items-snapshots.address}
          key: ${params.id}
      - when:
          - method: GET
            path: /items
        exit: kafka_cache_client0
        with:
          capability: {(operations.receiveEvents.action == receive) == fetch}
          topic: {channels.items-snapshots || channels.items-snapshots.address}
          merge:
            content-type: {defaultContentType}
      - when:
          - method: GET
            path: /items/{id}
          - path: /items/{id};{correlationId}
        exit: kafka_cache_client0
        with:
          capability: {(operations.sendEvents.action == send) == produce}
          topic: {channels.items-snapshots || channels.items-snapshots.address}
          key: ${params.id}
          reply-to: {operations.sendEvents.reply.address.location}
          async:
            location: /items/${params.id};${correlationId}
  kafka_cache_client0:
    type: {servers.kafka-cluster.protocol}
    kind: cache_client
    options:
      bootstrap:
        - {channels.items-snapshots || channels.items-snapshots.address}
    exit: kafka_cache_server0
  kafka_cache_server0:
    type: {servers.kafka-cluster.protocol}
    kind: cache_server
    options:
      bootstrap:
        - items-responses
    exit: kafka_client0
  kafka_client0:
    type: {servers.kafka-cluster.protocol}
    kind: client
    options:
      sasl:
        mechanism: {components.securitySchemes.mainSecurity.x-sasl.mechanism}
        username: ${{env.SASL_USERNAME}}
        password: ${{env.SASL_PASSWORD}}
    exit: tcp_client0
  tcp_client0:
    type: tcp
    kind: client
    options:
      host: {servers.kafka-cluster.url.host}
      port: {servers.kafka-cluster.url.port}
    routes:
      - when:
          - cidr: 0.0.0.0/0
